pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('sonarqube-token')
        NEXUS_CREDENTIALS = credentials('nexus-credentials')
    }

    stages {
        stage('Git Clone') {
            steps {
                // Clone the Git repository
                git branch: 'master', url: 'https://github.com/johnkennedy12/web-app.git'
            }
        }

        stage('Maven Build') {
            agent {
                docker {
                    image 'maven:3.5-jdk-8-alpine'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                // Build the Maven project
                sh 'mvn clean package'
            }
        }

        stage('Sonar Test') {
            agent {
                docker {
                    image 'maven:3.5-jdk-8-alpine'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                // Run SonarQube analysis with credentials
                sh "mvn sonar:sonar -Dsonar.host.url=http://172.31.93.36:9000 -Dsonar.login=${SONAR_TOKEN}"
            }
        }

        stage('Nexus Backup') {
            agent {
                docker {
                    image 'maven:3.5-jdk-8-alpine'
                    args '-v /var/run/docker.sock:/var/run/docker.sock'
                }
            }
            steps {
                // Deploy to Nexus with credentials
                withCredentials([usernamePassword(credentialsId: 'nexus-credentials', usernameVariable: 'NEXUS_USER', passwordVariable: 'NEXUS_PASS')]) {
                    sh "mvn deploy -Dmaven.repo.username=${NEXUS_USER} -Dmaven.repo.password=${NEXUS_PASS}"
                }
            }
        }

        stage('Tomcat') {
            agent {
                docker {
                    image 'tomcat:8.0.20-jre8'
                    args '-d -p 8080:8080'
                }
            }
            steps {
                // Build and start the Docker container
                script {
                    def containerId = sh(returnStdout: true, script: 'docker run -d -p 8080:8080 tomcat:8.0.20-jre8')
                    env.CONTAINER_ID = containerId.trim()
                }
                
                // Copy the built WAR file to Tomcat webapps directory
                sh "docker cp target/*.war ${env.CONTAINER_ID}:/usr/local/tomcat/webapps"
            }
        }
        
    }
}
